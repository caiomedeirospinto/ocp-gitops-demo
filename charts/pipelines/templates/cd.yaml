{{- range $app := .Values.applications }}
{{- range $env := $app.environments }}
{{- if and (eq "cd" $env.kind) ($app.enabled) }}
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: {{ $app.name }}-{{ $env.kind }}
  namespace: {{ $app.project }}-{{ $env.name }}
spec:
  params:
    - name: previous-namespace
      type: string
    - name: app-name
      type: string
    - name: git-revision
      type: string
  tasks:
    - name: import-image
      params:
        - name: SCRIPT
          value: >-
            oc tag $(params.previous-namespace)/$(params.app-name):$(params.git-revision) $(context.pipelineRun.namespace)/$(params.app-name):$(params.git-revision)
      taskRef:
        kind: ClusterTask
        name: openshift-client
    - name: sync-infra
      params:
        - name: argocd-version
          value: v2.0.5
        - name: application-name
          value: $(params.app-name)-{{ $env.name }}
      runAfter:
        - import-image
      taskRef:
        kind: ClusterTask
        name: argocd-task-sync-and-wait
    {{- if $app.serverless }}
    - name: deploy
      params:
        - name: ARGS
          value:
            - service
            - update
            - $(params.app-name)
            - '--revision-name=$(params.git-revision)'
            - >-
              --image=image-registry.openshift-image-registry.svc:5000/{{ $app.project }}-{{ $env.name }}/$(params.app-name):$(params.git-revision)
            - '--annotation=app.openshift.io/vcs-ref=$(params.git-revision)'
            - '--traffic=100'
            - '-n={{ $app.project }}-{{ $env.name }}'
      runAfter:
        - sync-infra
      taskRef:
        kind: ClusterTask
        name: kn
    {{- else }}
    - name: update-config
      params:
        - name: SCRIPT
          value: >-
            oc patch dc $(params.app-name) -p '{"spec":{"template":{"spec":{"containers":[{"name":"$(params.app-name)","image":"image-registry.openshift-image-registry.svc:5000/{{ $app.project }}-{{ $env.name }}/$(params.app-name):$(params.git-revision)"}]}}}}' -n={{ $app.project }}-{{ $env.name }}
      runAfter:
        - sync-infra
      taskRef:
        kind: ClusterTask
        name: openshift-client
    - name: start-deploy
      params:
        - name: SCRIPT
          value: >-
            oc rollout latest dc/$(params.app-name) -n={{ $app.project }}-{{ $env.name }}
      runAfter:
        - update-config
      taskRef:
        kind: ClusterTask
        name: openshift-client
    - name: deploy
      params:
        - name: SCRIPT
          value: >-
            oc rollout status dc/$(params.app-name) --watch=true -n={{ $app.project }}-{{ $env.name }}
      runAfter:
        - start-deploy
      taskRef:
        kind: ClusterTask
        name: openshift-client
    {{- end }}
    - name: set-revision
      params:
        - name: SCRIPT
          value: >-
            oc annotate {{ if $app.serverless }}service.serving.knative.dev{{ else }}dc{{ end }} $(params.app-name) app.openshift.io/vcs-ref=$(params.git-revision) -n={{ $app.project }}-{{ $env.name }} --overwrite
      runAfter:
        - deploy
      taskRef:
        kind: ClusterTask
        name: openshift-client
  finally:
    - name: remove-tag
      params:
        - name: SCRIPT
          value: >-
            oc tag -d {{ $app.project }}-{{ $env.name }}/$(params.app-name):$(params.git-revision)
      taskRef:
        kind: ClusterTask
        name: openshift-client
      when:
        - input: $(tasks.import-image.status)
          operator: in
          values: ["Completed", "Succeeded"]
        - input: $(tasks.set-revision.status)
          operator: in
          values: ["Failed"]
{{- end }}
{{- end }}
{{- end }}
