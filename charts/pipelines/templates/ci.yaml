{{- range $app := .Values.applications }}
{{- range $env := $app.environments }}
{{- if and (eq "ci" $env.kind) ($app.enabled) }}
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: {{ $app.name }}-{{ $env.kind }}
  namespace: {{ $app.project }}-{{ $env.name }}
spec:
  params:
    - name: git-url
      type: string
    - name: git-revision
      type: string
    - name: app-name
      type: string
  tasks:
    - name: git-clone
      params:
        - name: url
          value: $(params.git-url)
        - name: revision
          value: $(params.git-revision)
      taskRef:
        kind: ClusterTask
        name: git-clone-short-commit
      workspaces:
        - name: output
          workspace: source
    {{- if eq "nodejs" $app.runtime.name }}
    - name: install-dep
      params:
        - name: GOALS
          value:
            - install
        - name: NPM_MIRROR_URL
          value: >-
            {{ $.Values.artifactRepository.url }}{{ $.Values.artifactRepository.repos.npm }}
      runAfter:
        - git-clone
      taskRef:
        kind: ClusterTask
        name: nodejs
      workspaces:
        - name: source
          workspace: source
    {{- if has "angular" $app.runtime.libraries }}
    - name: build-code
      params:
        - name: GOALS
          value:
            - run
            - build
      runAfter:
        - unit-test
      taskRef:
        kind: ClusterTask
        name: nodejs
      workspaces:
        - name: source
          workspace: source
    {{- end }}
    {{- end }}
    - name: unit-test
      params:
        - name: GOALS
          value:
          {{- if eq "nodejs" $app.runtime.name }}
            - run
            - test
            {{- if has "angular" $app.runtime.libraries }}
            - '--'
            - '--no-watch'
            - '--no-progress'
            - '--browsers=ChromeHeadlessCI'
            {{- end }}
        - name: COMMAND
          value: /usr/local/bin/npm
        - name: NODEJS_IMAGE
          value: circleci/node:fermium-browsers
          {{- else }}
            - test
          {{- end }}
        {{- if eq "java" $app.runtime.name }}
        - name: MAVEN_MIRROR_URL
          value: >-
            {{ $.Values.artifactRepository.url }}{{ $.Values.artifactRepository.repos.maven }}
        {{- end }}
      runAfter:
        {{- if eq "nodejs" $app.runtime.name }}
        - install-dep
        {{- else }}
        - git-clone
        {{- end }}
      taskRef:
        kind: ClusterTask
        {{- if eq "nodejs" $app.runtime.name }}
        name: nodejs
        {{- else }}
        name: maven
        {{- end }}
      workspaces:
        - name: source
          workspace: source
        {{- if eq "java" $app.runtime.name }}
        - name: maven-settings
          workspace: maven-settings
        {{- end }}
    - name: build
      params:
        {{- if eq "nodejs" $app.runtime.name }}
        - name: VERSION
          value: {{ $app.runtime.version | quote }}
        {{- end }}
        - name: PATH_CONTEXT
          {{- if has "angular" $app.runtime.libraries }}
          value: dist/{{ $app.name }}
          {{- else }}
          value: .
          {{- end }}
        - name: IMAGE
          value: >-
            image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/$(params.app-name)
        {{- if eq "java" $app.runtime.name }}
        - name: MAVEN_MIRROR_URL
          value: >-
            {{ $.Values.artifactRepository.url }}{{ $.Values.artifactRepository.repos.maven }}
        {{- end }}
      runAfter:
        {{- if has "angular" $app.runtime.libraries }}
        - build-code
        {{- else }}
        - unit-test
        {{- end }}
      taskRef:
        kind: ClusterTask
        {{- if eq "nodejs" $app.runtime.name }}
        {{- if has "angular" $app.runtime.libraries }}
        name: s2i-nginx
        {{- else }}
        name: s2i-nodejs
        {{- end }}
        {{- else }}
        {{- if has "quarkus" $app.runtime.libraries }}
        name: s2i-quarkus
        {{- else if has "fuse-java" $app.runtime.libraries }}
        name: s2i-fuse-java
        {{- else }}
        name: s2i-java-{{ $app.runtime.version }}
        {{- end }}
        {{- end }}
      workspaces:
        - name: source
          workspace: source
    - name: tag-image
      params:
        - name: SCRIPT
          value: >-
            oc tag $(context.pipelineRun.namespace)/$(params.app-name):latest $(context.pipelineRun.namespace)/$(params.app-name):$(tasks.git-clone.results.commit)
      runAfter:
        - build
      taskRef:
        kind: ClusterTask
        name: openshift-client
    - name: sync-infra
      params:
        - name: revision
          value: $(tasks.git-clone.results.commit)
        - name: argocd-version
          value: v2.0.5
        - name: application-name
          value: $(params.app-name)-{{ $env.name }}
        - name: flags
          value: '--prune'
      runAfter:
        - tag-image
      taskRef:
        kind: ClusterTask
        name: argocd-task-sync-and-wait
    {{- if $app.serverless }}
    - name: deploy
      params:
        - name: ARGS
          value:
            - service
            - update
            - $(params.app-name)
            - '--revision-name=$(tasks.git-clone.results.commit)'
            - >-
              --image=image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/$(params.app-name):$(tasks.git-clone.results.commit)
            - '--annotation=app.openshift.io/vcs-ref=$(params.git-revision)'
            - '--traffic=100'
            - '-n={{ $app.project }}-{{ $env.name }}'
      runAfter:
        - sync-infra
      taskRef:
        kind: ClusterTask
        name: kn
    {{- else }}
    - name: update-config
      params:
        - name: SCRIPT
          value: >-
            oc patch dc $(params.app-name) -p '{"spec":{"template":{"spec":{"containers":[{"name":"$(params.app-name)","image":"image-registry.openshift-image-registry.svc:5000/{{ $app.project }}-{{ $env.name }}/$(params.app-name):$(tasks.git-clone.results.commit)"}]}}}}' -n={{ $app.project }}-{{ $env.name }}
      runAfter:
        - sync-infra
      taskRef:
        kind: ClusterTask
        name: openshift-client
    - name: start-deploy
      params:
        - name: SCRIPT
          value: >-
            oc rollout latest dc/$(params.app-name) -n={{ $app.project }}-{{ $env.name }}
      runAfter:
        - update-config
      taskRef:
        kind: ClusterTask
        name: openshift-client
    - name: deploy
      params:
        - name: SCRIPT
          value: >-
            oc rollout status dc/$(params.app-name) --watch=true -n={{ $app.project }}-{{ $env.name }}
      runAfter:
        - start-deploy
      taskRef:
        kind: ClusterTask
        name: openshift-client
    {{- end }}
    - name: set-revision
      params:
        - name: SCRIPT
          value: >-
            oc annotate {{ if $app.serverless }}service.serving.knative.dev{{ else }}dc{{ end }} $(params.app-name) app.openshift.io/vcs-ref=$(params.git-revision) app.openshift.io/vcs-uri=$(params.git-url) -n={{ $app.project }}-{{ $env.name }} --overwrite
      runAfter:
        - deploy
      taskRef:
        kind: ClusterTask
        name: openshift-client
  finally:
    - name: remove-tag
      params:
        - name: SCRIPT
          value: >-
            oc tag -d $(context.pipelineRun.namespace)/$(params.app-name):$(tasks.git-clone.results.commit)
      taskRef:
        kind: ClusterTask
        name: openshift-client
      when:
        - input: $(tasks.tag-image.status)
          operator: in
          values: ["Completed", "Succeeded"]
        - input: $(tasks.set-revision.status)
          operator: in
          values: ["Failed"]
  workspaces:
    - name: source
    {{- if eq "java" $app.runtime.name }}
    - name: maven-settings
    {{- end }}
{{- end }}
{{- end }}
{{- end }}
